README for zmdp

This C++ source code implements several approximate value iteration
algorithms for MDPs and POMDPs, including both algorithms I developed
(FRTDP [7], HSVI2 [6]) and some earlier algorithms that work on the same
problems (RTDP [1], LRTDP [3], and HDP [2]).  The software takes a
problem model file as input.  Currently supported model formats are Tony
Cassandra's POMDP file format [4] and a new format I developed for
describing problems in the racetrack domain from [1].

Special note: my implementations of some of the earlier algorithms are
based on publications that necessarily left out a lot of detail.  It's
quite possible that my implementation differs from the original in
important ways.  The original authors have not signed off on my
implementations: use at your own risk.  (And please inform me if you
find any errors.)

More information can be found at http://www.cs.cmu.edu/~trey/zmdp

Please let me know if you have any comments!

Trey Smith <trey@ri.cmu.edu>

Copyright (c) 2005-2006, Trey Smith.  All rights reserved.
More information is in the file named COPYING.

Table of contents of this README
* package contents
* requirements
* installation instructions
* usage instructions
* plotting performance
* acknowledgments
* references
* release notes

========================================================================
PACKAGE CONTENTS

README           This file
COPYING          Copyright information
src/build        Makefile system
src/common       Utility code, including a sparse linear algebra library
src/mdps         Racetrack domain and some example problems
src/bounds       Value function bounds representations
src/search       Search strategies: FRTDP, HSVI, etc.
src/pomdpParser  POMDP problem parsing code (thanks to Tony Cassandra!)
src/pomdpCore    Basic POMDP operations and simulation
src/pomdpBounds  Value function bounds representations specific to POMDPs
src/pomdpModels  Some example POMDP problems
src/pomdpExec    Interface you can use to execute policies output by zmdp.
src/main         Glue code for invoking algorithms from the shell
src/tools        Tools for scripting multiple runs and plotting performance.

==========================================================
REQUIREMENTS

Tested operating systems: Linux kernel 2.6.x (Fedora Core 2 and 4)
                          Mac OS X 10.4.4
Tested compilers:         gcc 3.2.2, 3.2.3, 4.0

Build system tested with:
* GNU Make 3.80
* GNU Flex 2.5.4
* GNU Bison 2.0
* Perl 5.8.6

Performance plotting scripts in tools directory tested with:
* gnuplot 4.0
* GNU gprof 2.15.94.0.2.2

========================================================================
INSTALLATION INSTRUCTIONS

* Unpack the tarball to generate the zmdp directory:

  tar xvfz zmdp-0.5.0.tgz

* Build:

  cd zmdp-0.5.0/src
  make install
  (generates binaries in zmdp-0.5.0/bin/<os_name>/, <os_name> = linux2 or darwin8)

* Do a test run:

  mkdir zmdp-0.5.0/results/
  cd zmdp-0.5.0/results
  ../bin/<os_name>/zmdpSolve ../src/pomdpModels/three_state.pomdp
  (look at results in 'out.policy')

* If you wish to test with one of the included RockSample problem
  instances, generate it.

  cd zmdp-0.5.0/src/pomdpModels
  ./gen_RockSample_5_7
  (generates RockSample_5_7.pomdp)

========================================================================
USAGE INSTRUCTIONS

The installation process creates binaries in the bin/<os_name>/ directory:

zmdpSolve
  zmdpSolve generates an output policy for a solution algorithm and
  problem you select.  It runs the solution algorithm in an anytime
  fashion, periodically printing bounds on the value of the initial
  state to console so that you can monitor progress.  When the run ends,
  the final policy is output to the file you specify.  There are several
  options for how to end the run: you can specify a desired regret bound
  ('precision') for the output solution, specify a fixed timeout, or
  just use ctrl-C to interrupt the algorithm when you are satisfied (it
  will output the final policy before exiting).

  Run 'zmdpSolve -h' for a summary of the options and some examples.

zmdpBenchmark
  zmdpBenchmark tests performance for a solution algorithm and problem
  you select.  As the solution algorithm progresses, various statistics
  are logged, such as the algorithm's bounds on the value of the initial
  state, the number of backups so far, and periodic measurements of the
  solution quality in simulation.  The plotting tools in the src/tools
  directory can be used to plot performance based on the logs.

  Logged data includes:
  * bounds.plot: bounds on initial state, internal algorithm state such as
                   number of trials, number of backups, etc.
  * inc.plot:    logs periodic measurements of solution quality in simulation
  * sim.plot:    logs some of the simulation traces so you can get a
                   qualitative sense of how the policy changes

  Run 'zmdpBenchmark -h' for a summary of the options and some examples.

========================================================================
PLOTTING PERFORMANCE

There are several scripts in the src/tools directory, a few of which
are described here.  They are intended to produce performance plots
based on the logs output by zmdpBenchmark.  Sorry, these tools are
somewhat messier / less documented than the solver itself.

=== MAKEPLOT

usage: makeplot OPTIONS <results_directory>
   -h    Print this help
   -i    Plot bounds vs. number of top-level iterations
   -p    Generate postscript output

makeplot plots the upper bound, lower bound, and measured solution
quality at testing epochs in a single graph with a logarithmic x axis.
It looks in <results_directory> for the files bounds.plot and inc.plot,
output by zmdpBenchmark.  By default the plot is displayed in an X window.
Using the -p option drops it into a PostScript file instead, e.g. for
inclusion in a paper.

=== COMPAREPLOTS

usage: compareplots OPTIONS <dir1> <dir2>
   -h    Print this help
   -t    Plot bounds vs. time
   -i    Plot bounds vs. number of top-level iterations
   -s    Plot speed (iterations v. time)
   -p    Generate postscript output
  
compareplots shows solution quality vs. wallclock time for two
directories in a single plot.  Anytime solution quality bounds are not
shown with the default options.

=== SPEEDPLOT

Speedplot is similar to compareplots, but uses number of updates on the
x axis rather than wallclock time.  You may prefer this so that results
are less dependent on the platform used.  A downside is that the amount
of time required for each update varies widely depending on the search
strategy and especially on the bounds representation.

========================================================================
ACKNOWLEDGMENTS

The ideas behind the novel algorithms in this codebase were joint work
with Reid Simmons.  Thanks to Geoff Gordon for helpful discussions.
Thanks to Tony Cassandra for developing the POMDP problem format and
distributing his problem reading and solution code.  Thanks to Matthijs
Spaan for distributing his PERSEUS POMDP-solving code, which provided a
template for my release of zmdp.

========================================================================
REFERENCES

[1] Learning to Act Using Real-Time Dynamic Programming.
    A. Barto, S. Bradke, and S. Singh.
    Artificial Intelligence 72(1-2): 81-138. 1995.

[2] Faster heuristic Search Algorithms for Planning with
     Uncertainty and Full Feedback.
    B. Bonet and H. Geffner. In Proc. of IJCAI, 2003.

[3] Labeled RTDP: Improving the Convergence of Real Time Dynamic Programming.
    B. Bonet and H. Geffner. In Proc. of ICAPS, 2003.

[4] Tony's POMDP Page. Tony Cassandra.
    http://www.cs.brown.edu/research/ai/pomdp/

[5] Heuristic Search Value Iteration for POMDPs.
    T. Smith and R. Simmons. In  Proc. of UAI, 2004.

[6] Point-based POMDP Algorithms: Improved Analysis and Implementation.
    T. Smith and R. Simmons. In Proc. of UAI, 2005.

[7] Focused Real-Time Dynamic Programming for MDPs.
    T. Smith and R. Simmons. In Proc. of AAAI, 2006.

========================================================================
RELEASE NOTES

Changes from 0.4.2 to 0.5.0 (24 Jun 2006)

* Added PomdpExec, an interface you can use to write an executive that
  reads in and executes POMDP policies output by zmdp.  (See
  src/pomdpExec/testPomdpExec.cc for an example.)

* Added ability for zmdpBenchmark to write out a policy file at each
  evaluation epoch.

* Added an early version of the LifeSurvey POMDP domain (this domain may
  change in future releases).

Changes from 0.4.0 to 0.4.2 (5 Jun 2006)

* Fixed a bug which caused zmdpSolve to crash when convex bounds
  and FRTDP were used together on some problems (0.4.1).

* Fixed initialization of bounds when '-v point' is used with POMDPs
  (0.4.2).

* Fixed syntax error in the problem generated by
  pomdpModels/gen_RockSample_5_5 (0.4.2).

Changes from 0.3.1 to 0.4.0 (1 Jun 2006)

* The POMDP model file format has changed slightly to restore
  conformance with Tony Cassandra's definition.  The zmdp language
  extension for declaring terminal states ('E: ...') is no longer
  necessary and no longer supported.  To my knowledge, only models that
  I created and distributed in zmdp use E: declarations; those models
  have been updated by commenting out E: lines.

* Initialization with the standard parser (used when zmdpSolve is
  invoked without -f) is now much more efficient in time and memory.
  Use of -f should no longer be necessary in most cases.

Changes from 0.3.0 to 0.3.1 (12 May 2006)

* Fixed a spurious error about policy output not being supported.

Changes from 0.2.1 to 0.3.0 (28 Apr 2006)

* Refactored code so that different problem types, search strategies,
  and value function representations can be mixed and matched.

* There are now separate binaries for benchmarking algorithms
  (with incremental policy evaluation) and just solving particular
  POMDPs (with policy output at the end).

* No longer split binaries for each solution algorithm -- there are too
  many combinations to have a different binary for each.

Changes from 0.2.0 to 0.2.1 (14 Apr 2006)

* Fixed problem with directory structure in tarball that broke
  compilation.

* Performance vs. number of updates for the HSVI algorithm is now
  output in the bounds.plot file in the same format as for other
  algorithms, suitable for plotting using the speedplot utility.

Changes from zpomdp 0.1 to zmdp 0.2.0 (27 Feb 2006)

* zmdp now includes MDP solving as well as POMDP solving
  capabilities (hence the name change).

* Created uniform MDP/POMDP API so that POMDPs formulated as
  belief-space MDPs can be passed to MDP heuristic search algorithms.

* Some code has been refactored to reduce code duplication and
  provide cleaner interfaces.  This involved shuffling directories.

* Implemented racetrack domain and some sample problems from the
  literature.

* Implemented RTDP, LRTDP, HDP, HDP+L, and FRTDP.

* Separate binaries are now produced for each (problem type, algorithm)
  pair rather than a single unified binary.

zpomdp 0.1.0 (28 Oct 2005)

* Initial release.

==========================================================
$Id: README,v 1.15 2006-06-24 16:32:42 trey Exp $
