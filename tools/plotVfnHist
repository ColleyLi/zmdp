#!/usr/bin/perl

# run this script in the same directory where you run makeVfnHist; it generates the plots

sub dosys {
    my $cmd = shift;
    print "$cmd\n";
    my $ret = system($cmd);
    if (0 != $ret) {
	die "ERROR: '$cmd' returned exit status $ret\n";
    }
    return $ret;
}

sub usage {
    die "usage: plotVfnHist OPTIONS\n".
	"  -h or --help  Print this help.\n".
	"  -p            Produce a pdf of the plot instead of displaying it\n";
}

$doOutput = 0;
for (@ARGV) {
    if ($_ eq "-h" or $_ eq "--help") {
	&usage();
    } elsif ($_ eq "-p") {
	$doOutput = 1;
    } else {
	die "ERROR: unknown option $_ (-h for help)\n";
    }
}

sub getNumBackups {
    my $file = shift;
    $lastLine = `tail -1 $file`;
    chop $lastLine;
    @fields = split(/\s+/, $lastLine);
    return $fields[6];
}

&dosys("rm -rf plotscratch");
&dosys("mkdir -p plotscratch");
&dosys("grep -v \\# gtruth/backups.log > plotscratch/backups.log");
&dosys("head -1000 plotscratch/backups.log > plotscratch/k1.log");
&dosys("sort -n plotscratch/k1.log | tail -1 > plotscratch/k1Last.log");
&dosys("head -2000 plotscratch/backups.log | tail -1000 > plotscratch/k2.log");
&dosys("sort -n plotscratch/k2.log | tail -1 > plotscratch/k2Last.log");

$k1Last = `cat plotscratch/k1Last.log`;
chop $k1Last;
$k1Size = $k1Last+1;
$k2Last = `cat plotscratch/k2Last.log`;
chop $k2Last;
$k2Size = $k2Last+1;

for ("lpoint", "mp", "mpmask", "mpprune", "mpboth", "upoint", "saw", "sawmask") {
    eval("\$${_}B = &getNumBackups('$_/bounds.plot');");
}

$octOpts = "--silent ";
if ($doOutput) {
    $outputPlot =<<"EOF";
#############################
__gnuplot_set__ terminal postscript
__gnuplot_set__ output "vfnHist.ps"
#############################
EOF
} else {
    $outputPlot = "";
}

$octScript =<<"EOF";
#############################
function cdfs = calcCdfs(gtruth, vals, entries, bins, invert);
  numLines = size(vals,2);
  numBins = size(bins,2);
  cdfs = zeros(numBins,numLines);
  for i=1:numLines
    [diffHist,foo] = hist(vals(entries,i) - gtruth(entries), bins, 1);
    if invert
      tmp = [0, diffHist(1:(numBins-1))];
      cdfs(:,i) = max(0, 1 - cumsum(tmp)');
    else
      cdfs(:,i) = cumsum(diffHist)';
    end
    #cdfs(:,i) = diffHist';
  end
end

numBins = 20;

gtruth = load("gtruth/boundValues.log");
mp = load("mp/boundValues.log");
mpprune = load("mpprune/boundValues.log");
mpmask = load("mpmask/boundValues.log");
mpboth = load("mpboth/boundValues.log");
saw = load("saw/boundValues.log");
sawmask = load("sawmask/boundValues.log");
lpoint = load("lpoint/boundValues.log");
upoint = load("upoint/boundValues.log");

lbgtruth = gtruth(:,2);
lball = [mp(:,2), mpprune(:,2), mpmask(:,2), mpboth(:,2), lpoint(:,2)];
LMP = 1;
LMPPRUNE = 2;
LMPMASK = 3;
LMPBOTH = 4;
LPOINT = 5;

ubgtruth = gtruth(:,3);
uball = [saw(:,3), sawmask(:,3), upoint(:,3)];
USAW = 1;
USAWMASK = 2;
UPOINT = 3;

setA = 1:$k1Size;
setB = ($k1Size+1):$k2Size;
$outputPlot

__gnuplot_set__ key left

bds = [-30,0];
delta = (range(bds))/numBins;
bins = (bds(1):delta:bds(2)); # - delta/2;

subplot(2,2,1);
cdfs = calcCdfs(lbgtruth, lball, setA, bins, 0);
plot(bins,cdfs(:,LMP),'-+;mp ($mpB);',
     bins,cdfs(:,LMPPRUNE),'-*;mp+prune ($mppruneB);',
     bins,cdfs(:,LMPMASK),'--o;mp+mask ($mpmaskB);',
     bins,cdfs(:,LMPBOTH),'--x;mp+both ($mpbothB);',
     bins,cdfs(:,LPOINT),';point ($lpointB);');
title('Lower Bound, Distribution A');

subplot(2,2,3);
cdfs = calcCdfs(lbgtruth, lball, setB, bins, 0);
plot(bins,cdfs(:,LMP),'-+;mp ($mpB);',
     bins,cdfs(:,LMPPRUNE),'-*;mp+prune ($mppruneB);',
     bins,cdfs(:,LMPMASK),'-o;mp+mask ($mpmaskB);',
     bins,cdfs(:,LMPBOTH),'-x;mp+both ($mpbothB);',
     bins,cdfs(:,LPOINT),';point ($lpointB);');
title('Lower Bound, Distribution B');

__gnuplot_set__ key right

bds = [0,3];
delta = (range(bds))/numBins;
bins = (bds(1):delta:bds(2)); # + delta/2;

subplot(2,2,2);
cdfs = calcCdfs(ubgtruth, uball, setA, bins, 1);
plot(bins,cdfs(:,USAW),'-+;saw ($sawB);',
     bins,cdfs(:,USAWMASK),'-*;saw+mask ($sawmaskB);',	
     bins,cdfs(:,UPOINT),';point ($upointB);');
title('Upper Bound, Distribution A');

subplot(2,2,4);
cdfs = calcCdfs(ubgtruth, uball, setB, bins, 1);
plot(bins,cdfs(:,USAW),'-+;saw ($sawB);',
     bins,cdfs(:,USAWMASK),'-*;saw+mask ($sawmaskB);',
     bins,cdfs(:,UPOINT),';point ($upointB);');
title('Upper Bound, Distribution B');

#############################
EOF

print "octave $octOpts <<\n$octScript";
open(OCT, "|octave $octOpts") or die "ERROR: couldn't run octave\n";
select(OCT);
$| = 1;
select(STDOUT);
print OCT $octScript;

$tmpScript = "plotVfn.m";
open(SCR,">$tmpScript") or
    die "ERROR: couldn't open $tmpScript for writing: $!\n";
print SCR $octScript;
close(SCR);
print "[octave script also output to $tmpScript]\n";

if ($doOutput) {
    close(OCT);
    &dosys("ps2pdf vfnHist.ps");
    &dosys("rm -f vfnHist.ps");
    print "output written to vfnHist.pdf\n";
} else {
    sleep(10000);
}
