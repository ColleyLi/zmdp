README for zmdp

This C++ source code implements several approximate value iterations for
MDPs and POMDPs, including HSVI2 [6], RTDP [1], LRTDP [3], HDP [2],
and FRTDP [not yet published].  The software takes a problem specification
as input.  Currently supported specification formats are Tony Cassandra's
POMDP file format [4] and a new format for describing problems in the
racetrack domain from [1].

Special note: my implementations of some of these algorithms are based
on publications that necessarily left out a lot of detail.  It's quite
possible that my implementation differs from the original in important
ways.  The original authors have not signed off on my implementations:
use at your own risk.  (And please inform me if you find any errors.)

More information can be found at http://www.cs.cmu.edu/~trey/zmdp

Please let me know if you have any comments!

Trey Smith <trey@ri.cmu.edu>

Copyright (c) 2005-2006, Trey Smith.  All rights reserved.
More information is in the file named COPYING.

Table of contents of this README
* release notes
* package contents
* usage instructions
* example sessions
* plotting results
* acknowledgments
* references

========================================================================
RELEASE NOTES

Changes from zpomdp 0.1 to zmdp 0.2 (27 Feb 2006)

* zmdp now includes MDP solving as well as POMDP solving
  capabilities (hence the name change).

* Created uniform MDP/POMDP API so that POMDPs formulated as
  belief-space MDPs can be passed to MDP heuristic search algorithms.

* Some code has been refactored to reduce code duplication and
  provide cleaner interfaces.  This involved shuffling directories.

* Implemented racetrack domain and some sample problems from the
  literature.

* Implemented RTDP, LRTDP, HDP, HDP+L, and FRTDP.

* Separate binaries are now produced for each (problem type, algorithm)
  pair rather than a single unified binary.

zpomdp 0.1 (28 Oct 2005)

* Initial release.

========================================================================
PACKAGE CONTENTS

src/build        Makefile system
src/common       Utility code, including a sparse linear algebra library
src/mdps         Racetrack domain and some example problems
src/bounds       Interfaces for representing value function bounds
src/rtdp         Search strategies: RTDP, LRTDP, HDP, FRTDP, etc.
src/pomdpParser  POMDP problem parsing code (thanks to Tony Cassandra!)
src/pomdpCore    Basic POMDP operations and simulation
src/pomdpBounds  Value function bounds representations specific to POMDPs
src/hsvi2        HSVI2 algorithm
src/main         Glue code for invoking algorithms from the shell
src/problems     Problems from [5] and a trivial example.
src/tools        Tools for scripting multiple runs and plotting results.

========================================================================
USAGE INSTRUCTIONS

To get started please first follow the instructions in INSTALL.

The binary produced by the installation process is named
bin/linux2/solveMDP.  (It solves both MDPs and POMDPs.)  Use
'solveMDP -h' to get the full usage instructions.  Part of the
instructions are copied here:

usage: solveMDP OPTIONS <model>

Main flags:
  -s or --search         Specifies search strategy. Valid choices:
                           rtdp, lrtdp, hdp, frtdp [default: frtdp]
  -t or --type           Specifies problem type. Valid choices:
                           racetrack, pomdp [default: infer from model filename]
  -v or --value          Specifies value function representation. Valid choices
                         depend on problem type. With -t pomdp, choices are:
                           point, convex [default: convex]
                         For other problem types, choices are:
                           point [default: point]

========================================================================
EXAMPLE SESSIONS

COMMAND:

  solveMDP -i 100 --min-eval -1 problems/three_state.pomdp 

EXPLANATION:

  The '-i 1000' flag sets the number of iterations that should be used
  when evaluating solution quality at each simulation epoch.  The
  default number is 100.  Adjusting the number of iterations trades
  total testing time against precision in the solution quality
  measurement (which is reflected in the error bars of plots if you use
  the provided plotting tools).

  '--min-eval -1' specifies when to insert the first simulation epoch
  for testing solution quality.  If minEval=k, the first epoch comes
  after 10^k seconds.  Subsequent epochs are spaced logarithmically with
  three epochs per order of magnitude of running time.  This is nice for
  semi-log plots.  NOTE: to be more accurate, testing epochs can only be
  inserted when the solution algorithm yields control to the testing
  harness, so the logarithmic spacing rule is only approximate.

  'problems/three_state.pomdp' indicates what problem to solve.
  solveMDP infers the problem type (and associated model parser) as
  'pomdp' from the filename suffix.  Alternately, you can manually
  specify the problem type with e.g. '-t pomdp'.

COMMAND:

  solveMDP -f problems/RockSample_5_7.pomdp

EXPLANATION:

  The '-f' flag tells solveMDP to use a faster problem parser that is
  also very picky.  The fast parser will probably only accept RockSample
  problems, but you will really want to use it on large problem
  instances!

========================================================================
PLOTTING RESULTS

Some of the plotting scripts in the src/tools directory are worth
mentioning.

=== MAKEPLOT

usage: makeplot OPTIONS <results_directory>
   -h    Print this help
   -i    Plot bounds vs. number of top-level iterations
   -p    Generate postscript output

makeplot plots the upper bound, lower bound, and measured solution
quality at testing epochs in a single graph with a logarithmic x axis.
It looks in <results_directory> for the files bounds.plot and inc.plot,
output by solveMDP.  By default the plot is displayed in an X window.
Using the -p option drops it into a PostScript file instead, e.g. for
inclusion in a paper.

=== COMPAREPLOTS

usage: compareplots OPTIONS <dir1> <dir2>
   -h    Print this help
   -t    Plot bounds vs. time
   -i    Plot bounds vs. number of top-level iterations
   -s    Plot speed (iterations v. time)
   -p    Generate postscript output
  
compareplots shows solution quality vs. wallclock time for two
directories in a single plot.  Anytime solution quality bounds are not
shown with the default options.

=== SPEEDPLOT

Speedplot is similar to compareplots, but uses number of updates on the
x axis rather than wallclock time.  You may prefer this so that results
are less dependent on the platform used.  A downside is that the amount
of time required for each update varies widely depending on the search
strategy and especially on the bounds representation.

========================================================================
ACKNOWLEDGMENTS

The theory behind the novel algorithms in this codebase was joint work
with Reid Simmons.  Thanks to Geoff Gordon for helpful discussions.
Thanks to Tony Cassandra for developing the POMDP problem format and
distributing his problem reading and solution code.  Thanks to Matthijs
Spaan for distributing his PERSEUS POMDP-solving code, which provided a
template for my release of zmdp.

========================================================================
REFERENCES

[1] Learning to Act Using Real-Time Dynamic Programming.
    A. Barto, S. Bradke, and S. Singh.
    Artificial Intelligence 72(1-2): 81-138. 1995.

[2] Faster heuristic Search Algorithms for Planning with
     Uncertainty and Full Feedback.
    B. Bonet and H. Geffner. In Proc. of IJCAI, 2003.

[3] Labeled RTDP: Improving the Convergence of Real Time Dynamic Programming.
    B. Bonet and H. Geffner. In Proc. of ICAPS, 2003.

[4] Tony's POMDP Page. Tony Cassandra.
    http://www.cs.brown.edu/research/ai/pomdp/

[5] Heuristic Search Value Iteration for POMDPs.
    T. Smith and R. Simmons. In  Proc. of UAI, 2004.
    http://www.cs.cmu.edu/~trey/papers/smith04_hsvi.pdf

[6] Point-based POMDP Algorithms: Improved Analysis and Implementation.
    T. Smith and R. Simmons. In Proc. of UAI, 2005.
    http://www.cs.cmu.edu/~trey/papers/smith05_point_based_pomdp.pdf

==========================================================
$Id: README,v 1.3 2006-04-10 20:59:28 trey Exp $
