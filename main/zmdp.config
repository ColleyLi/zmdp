# $Revision: 1.2 $  $Author: trey $  $Date: 2006-10-16 05:48:37 $

# searchStrategy: Specifies search strategy.  Valid choices are
# 'frtdp', 'hsvi', 'rtdp', 'lrtdp', and 'hdp'.
searchStrategy frtdp

# modelType: Specifies the type of planning model.  Valid choices are
# '-', 'racetrack', and 'pomdp'.  '-' tells ZMDP to infer the model type
# from its filename extension. 'racetrack' means the model is from the
# racetrack MDP benchmark domain.  'pomdp' means the model is in Tony
# Cassandra's POMDP file format.
modelType -

# valueFunctionRepresentation: Specifies how to represent the value
# function.  Valid choices are '-', 'point', and 'convex'.  '-' tells
# ZMDP to infer the representation to use from the model type ('point'
# for MDP problems and 'convex' for POMDP problems).  Note: 'convex'
# only makes sense for POMDPs.
valueFunctionRepresentation -

# policyOutputFile: Specifies where to write the output policy.  ZMDP
# outputs the current policy at the following times: (1) at each
# evaluation epoch, and (2) whenever the run terminates for any reason
# (regret bound reached, timeout, or ctrl-C user interrupt).  Note that
# policies can currently only be output if modelType = pomdp and
# valueFunctionRepresentation = convex.  '-' tells ZMDP to write the
# policy to 'out.policy' if the zmdpSolve front-end is used and disable
# policy output otherwise.  'none' tells ZMDP to disable policy output.
policyOutputFile -

# fastPomdpParser: Specify 0 or 1.  If value is 1, use my fast but very
# picky alternate parser for reading in POMDP models.  If value is 0,
# Tony Cassandra's more flexible parser is used.
useFastPomdpParser 0

# terminateRegretBound: If set to a positive value, the solution
# algorithm will terminate when the regret of the current policy with
# respect to the optimal policy is bounded to the specified value.
terminateRegretBound 1e-3

# terminateWallclockSeconds: If set to a positive value, the solution
# algorithm will terminate after running for the specified amount of
# wallclock time (note: this excludes time spent outside the solution
# algorithm, e.g. reading model files and evaluating policies for
# benchmark purposes).
terminateWallclockSeconds -1

# maxHorizon (integer): If set to a positive value, informs ZMDP that
# the system is guaranteed to enter a zero-reward absorbing state after
# at most the specified number of time steps.  This hint is used to
# calculate tighter initial bounds (currently only used for POMDP
# problems).  Note: If the problem is an undiscounted POMDP, you must
# specify a maxHorizon value.
maxHorizon -1

# useWeakUpperBoundHeuristic: Specify 0 or 1.  If 1, avoid spending time
# generating a good upper bound heuristic.  This only applies to some
# problems and interpretation depends on the problem; e.g., sets h_U = 0
# for racetrack.
useWeakUpperBoundHeuristic 0

# forceMaintainLowerBound: Specify 0 or 1. If 1, forces ZMDP to maintain
# a lower bound on the optimal value function, even if the search
# strategy (e.g. rtdp, hdp) normally does not calculate it or rely on
# its presence.  The resulting lower bound will be used for action
# selection at runtime.
forceMaintainLowerBound 0

# forceUpperBoundRunTimeActionSelection: Specify 0 or 1.  If 1, forces ZMDP
# to select actions at run time based on the upper bound, even if the
# lower bound is available.  The lower bound typically performs better
# and is used by default.
forceUpperBoundRunTimeActionSelection 0

# evaluationTrialsPerEpoch: Specifies the number of simulation trials to
# run at each policy evaluation epoch.  The reported policy quality for
# the epoch is the average reward achieved over the set of trials.
# [does not apply to zmdpSolve]
evaluationTrialsPerEpoch 100

# evaluationMaxStepsPerTrial: If set to a positive value, specifies the
# maximum number of time steps to run each simulation trial when
# evaluating policy quality.  Note that ZMDP will automatically terminate
# a trial if the system enters a zero-reward absorbing state, so if
# your model guarantees this will happen in finite time you may find you
# don't need to set this parameter.
# [does not apply to zmdpSolve]
evaluationMaxStepsPerTrial 251

# evaluationFirstEpochWallclockSeconds: Specifies the amount of
# wallclock time to run the solution algorithm for before the first
# policy evaluation epoch.  Note: because the benchmark driver can only
# run evaluation epochs when the solution algorithm yields control, the
# actual epoch timing is not guaranteed to match what you specify.  The
# timing guarantees are that (1) the evaluation epoch will start *after*
# the time you specify, and (2) the actual elapsed wallclock time will
# be accurately logged in the benchmark output used for plotting.
# [does not apply to zmdpEvaluate or zmdpSolve]
evaluationFirstEpochWallclockSeconds 1.0

# evaluationEpochsPerMagnitude: Evaluation epoch timing is spaced
# logarithmically according to elapsed wallclock time.  This parameter
# specifies the number of epochs per order of magnitude in a log plot.
# For instance, if 3 is specified, there will be three epochs between 10
# and 100 seconds elapsed, three between 100 and 1000 seconds elapsed,
# etc.
# [does not apply to zmdpEvaluate or zmdpSolve]
evaluationEpochsPerMagnitude 10

# evaluationOutputFile: Specifies where to write results from policy
# evaluation.  The resulting file has one line per epoch.
# [does not apply to zmdpEvaluate or zmdpSolve]
evaluationOutputFile inc.plot

# boundsOutputFile: Specifies where to write data on bounds at the
# initial state. The resulting file has one line per top-level
# trial of the search algorithm.
# [does not apply to zmdpEvaluate or zmdpSolve]
boundsOutputFile bounds.plot

# simulationTraceOutputFile: Specifies where to write logs of simulator
# state/belief, actions selected, etc. during policy evaluation.  The
# resulting file has two lines per time step of simulation.  When using
# zmdpBenchmark, only the first trial in each evaluation epoch is logged
# in order to keep the file size reasonable.  When using zmdpEvaluate,
# all trials are logged.
# [does not apply to zmdpSolve]
simulationTraceOutputFile sim.plot
